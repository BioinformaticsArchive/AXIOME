#!/usr/bin/env make -f
# Automation tool for QIIME
#
# Basic rules for doing QIIME analysis. It assumes you have a mapping.txt file with all your sequences and that your sequences are named in QIIME's ${SampleID::int}_${UID::int} format. AutoQIIME does this for you. ;-)

# Alpha diversity (Chao1 curves) -- This is here so that if you simply do qiime_setup from the terminal, it will attempt to do alpha diversity.
alpha: alpha_div/alpha_rarefaction_plots/rarefaction_plots.html

alpha_div/alpha_rarefaction_plots/rarefaction_plots.html: otu_table.txt mapping.txt custom_parameters.txt seq.fasta_rep_set_aligned_pfiltered.tre
	test ! -d rarefaction_tables || rm -r rarefaction_tables
	test ! -d alpha_div || rm -r alpha_div
	alpha_rarefaction.py -i otu_table.txt -m mapping.txt -p custom_parameters.txt -t seq.fasta_rep_set_aligned_pfiltered.tre -o alpha_div

# Default custom parameters file
define CUSTOM_PARAMETERS
pick_otus:otu_picking_method cdhit
pick_otus:clustering_algorithm furthest
pick_otus:max_cdhit_memory 400
pick_otus:refseqs_fp
pick_otus:blast_db
pick_otus:similarity 0.97
pick_otus:max_e_value 1e-10
pick_otus:prefix_prefilter_length
pick_otus:trie_prefilter
pick_otus:prefix_length
pick_otus:suffix_length
pick_otus:optimal_uclust
pick_otus:exact_uclust
pick_otus:user_sort
pick_otus:suppress_presort_by_abundance_uclust
pick_otus:suppress_new_clusters
pick_rep_set:rep_set_picking_method most_abundant
pick_rep_set:sort_by otu
align_seqs:alignment_method infernal
align_seqs:pairwise_alignment_method uclust
align_seqs:blast_db
align_seqs:min_length 100
align_seqs:min_percent_id 75.0
assign_taxonomy:id_to_taxonomy_fp
assign_taxonomy:reference_seqs_fp
assign_taxonomy:assignment_method rdp
assign_taxonomy:blast_db
assign_taxonomy:confidence 0.5
filter_alignment:allowed_gap_frac 0.999999
filter_alignment:remove_outliers False
filter_alignment:threshold 3.0
make_phylogeny:tree_method fasttree
make_phylogeny:root_method tree_method_de
alpha_diversity:metrics chao1,observed_species,PD_whole_tree,chao1_confidence
beta_diversity:metrics weighted_unifrac,unweighted_unifrac
make_prefs_file:background_color black
make_prefs_file:mapping_headers_to_use Treatment
make_prefs_file:monte_carlo_dists 10
make_3d_plots:custom_axes
multiple_rarefactions:num-reps 100
multiple_rarefactions:depth
multiple_rarefactions:lineages_included False
make_rarefaction_plots:imagetype svg
endef
export CUSTOM_PARAMETERS
custom_parameters.txt:
	@echo "$$CUSTOM_PARAMETERS" > custom_parameters.txt

# Build basic data from sequences
picked_otus/seq_otus.txt: seq.fasta custom_parameters.txt
	test ! -d picked_otus || rm -r picked_otus
	pick_otus.py -i seq.fasta -m $$(grep 'pick_otus:otu_picking_method' custom_parameters.txt | cut -f 2 -d " ") -o picked_otus -M 4096

seq.fasta_rep_set.fasta: picked_otus/seq_otus.txt seq.fasta
	aq-mkrepset seq.fasta picked_otus/seq_otus.txt > seq.fasta_rep_set.fasta
	# mkrepset replactes the QIIME algorithm which is stupid
	#pick_rep_set.py -i picked_otus/seq_otus.txt -f seq.fasta

aligned/seq.fasta_rep_set_aligned.fasta: seq.fasta_rep_set.fasta
	test ! -d aligned || rm -r aligned
	align_seqs.py -o aligned -m infernal -t $$INFERNAL_MODEL -i seq.fasta_rep_set.fasta

rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt: seq.fasta_rep_set.fasta
	test ! -d rdp_assigned_taxonomy || rm -r rdp_assigned_taxonomy
	assign_taxonomy.py -i seq.fasta_rep_set.fasta

seq.fasta_rep_set_aligned_pfiltered.fasta: aligned/seq.fasta_rep_set_aligned.fasta
	filter_alignment.py -i aligned/seq.fasta_rep_set_aligned.fasta -s

seq.fasta_rep_set_aligned_pfiltered.tre:seq.fasta_rep_set_aligned_pfiltered.fasta
	make_phylogeny.py -i seq.fasta_rep_set_aligned_pfiltered.fasta

otu_table.txt: picked_otus/seq_otus.txt rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt
	make_otu_table.py -i picked_otus/seq_otus.txt -t rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt -o otu_table.txt

# Beta diversity analysis -- We are assuming that you want to do multiple beta diversity analysis, so you need to have a properly mangled OTU table
beta_div%/unweighted_unifrac_otu_table.txt beta_div%/weighted_unifrac_otu_table.txt: seq.fasta_rep_set_aligned_pfiltered.tre otu_table%.txt
	beta_diversity.py -i otu_table$*.txt -m weighted_unifrac,unweighted_unifrac -o beta_div$* -t seq.fasta_rep_set_aligned_pfiltered.tre

beta_div_pcoa%/pcoa_unweighted_unifrac_otu_table.txt beta_div_pcoa%/pcoa_weighted_unifrac_otu_table.txt: beta_div%/unweighted_unifrac_otu_table.txt beta_div%/weighted_unifrac_otu_table.txt
	principal_coordinates.py -i beta_div$* -o beta_div_pcoa$*


otu_table_summarized_otu%.txt: otu_table%.txt
	aq-pretendsummarize $< > $@

# Produce a rank-abundance plot
rank_abundance/rank_abundance.pdf: otu_table.txt
	test ! -d rank_abundance || rm -r rank_abundance
	plot_rank_abundance_graph.py -i otu_table.txt -s '*' -o rank_abundance

# Produce a BLAST database
nr.nhr nr.nin nr.nsq: seq.fasta
	formatdb -i seq.fasta -n nr -p F

# Decorate OTU table with representative sequences
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.txt
	aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.txt > otu_table_with_sequences.txt

# Do chimera checking with UCHIME
sorted%.fasta: seq%.fasta
	uclust --sort $< --output $@

seq%.fasta: seq.fasta
	awk '/^>/ { if (name) { print name "\n" seq; } if ($$0 ~ /$*_/) { name = $$0; } else { name = ""; } seq = ""; } $$0 !~ /^>/ { seq = seq $$0; } END { if (name) { print name "\n" seq; } }' $< > $@

identities%.uc: sorted%.fasta
	uclust --input $< --uc $@ --id 1

identities%.awk: identities%.uc
	awk 'END {print "$$0 !~ /^>/"} $$1 == "C" {print "/^>"$$2"\\|/ { print \">"$$2";size="$$3"\"; }" }' $< > $@

identities%.fasta: identities%.uc seq_sorted%.fasta identities%.awk
	uclust --uc2fasta $< --input seq_sorted$*.fasta --output /dev/stdout | awk -f identities$*.awk > $@

chimeras%.uchime chimeras%.aln chimeras%.fasta: identities%.fasta
	usearch --uchime $< --uchimeout chimeras$*.uchime --uchimealns chimeras$*.aln --chimeras chimeras$*.fasta $(UCHIMEFLAGS)

# PCA with R
biplot.pdf: mapping.txt otu_table.txt headers.txt
	aq-pca

.PHONY: all alpha
