#!/usr/bin/make -f
# Automation tool for QIIME
#
# Basic rules for doing QIIME analysis. It assumes you have a mapping.txt file with all your sequences and that your sequences are named in QIIME's ${SampleID::int}_${UID::int} format. AutoQIIME does this for you. ;-)

# Alpha diversity (Chao1 curves) -- This is here so that if you simply do qiime_setup from the terminal, it will attempt to do alpha diversity.
alpha: alpha_div/alpha_rarefaction_plots/rarefaction_plots.html

alpha_div/alpha_rarefaction_plots/rarefaction_plots.html: otu_table.txt mapping.txt custom_parameters.txt seq.fasta_rep_set_aligned_pfiltered.tre
	@echo Computing Alpha Diversity...
	@test ! -d rarefaction_tables || rm -r rarefaction_tables
	@test ! -d alpha_div || rm -r alpha_div
	$(V)$(QIIME_PREFIX)alpha_rarefaction.py -i otu_table.txt -m mapping.txt -p custom_parameters.txt -t seq.fasta_rep_set_aligned_pfiltered.tre -o alpha_div

OTU_PICKING_METHOD ?= cdhit
ALIGN_METHOD ?= infernal
BLASTDB_NAME ?= "Unknown 16S Database"
V ?= @

# Default custom parameters file
define CUSTOM_PARAMETERS
pick_otus:clustering_algorithm furthest
pick_otus:max_cdhit_memory 400
pick_otus:refseqs_fp
pick_otus:blast_db
pick_otus:similarity 0.97
pick_otus:max_e_value 1e-10
pick_otus:prefix_prefilter_length
pick_otus:trie_prefilter
pick_otus:prefix_length
pick_otus:suffix_length
pick_otus:optimal_uclust
pick_otus:exact_uclust
pick_otus:user_sort
pick_otus:suppress_presort_by_abundance_uclust
pick_otus:suppress_new_clusters
pick_rep_set:rep_set_picking_method most_abundant
pick_rep_set:sort_by otu
align_seqs:pairwise_alignment_method uclust
align_seqs:blast_db
align_seqs:min_length 100
align_seqs:min_percent_id 75.0
assign_taxonomy:id_to_taxonomy_fp
assign_taxonomy:reference_seqs_fp
assign_taxonomy:assignment_method rdp
assign_taxonomy:blast_db
assign_taxonomy:confidence 0.5
filter_alignment:allowed_gap_frac 0.999999
filter_alignment:remove_outliers False
filter_alignment:threshold 3.0
make_phylogeny:tree_method fasttree
make_phylogeny:root_method tree_method_de
alpha_diversity:metrics chao1,observed_species,PD_whole_tree,chao1_confidence
beta_diversity:metrics weighted_unifrac,unweighted_unifrac
make_prefs_file:background_color black
make_prefs_file:mapping_headers_to_use Treatment
make_prefs_file:monte_carlo_dists 10
make_3d_plots:custom_axes
multiple_rarefactions:num-reps 100
multiple_rarefactions:depth
multiple_rarefactions:lineages_included False
make_rarefaction_plots:imagetype svg
endef
export CUSTOM_PARAMETERS
custom_parameters.txt:
	@echo "$$CUSTOM_PARAMETERS" > custom_parameters.txt

# Build basic data from sequences
ifeq ($(OTU_PICKING_METHOD),raw-uclust)
sorted.fasta: seq.fasta
	@echo Sorting sequences...
	$(V)uclust --mergesort $< --output $@

seq.uc: sorted.fasta
	@echo Picking OTUs using uclust without QIIME...
	$(V)uclust --id 0.97 --input sorted.fasta --uc seq.uc

picked_otus/seq_otus.txt: seq.uc
	@test -d picked_otus || mkdir -p picked_otus
	@awk '$$1 == "S" { a[$$2] = "\t" $$9; if ($$2 > m) { m = $$2; } } $$1 == "H" { a[$$2] = (a[$$2] "\t" $$9); } END { for (i = 0; i < m; i++) { print i a[i]; }}' $< > $@
else
ifeq ($(OTU_PICKING_METHOD),raw-cdhit)
picked_otus/cd-hit-out.clstr: seq.fasta
	@echo Generating cluster file using cdhit...
	@test -d picked_otus || mkdir -p picked_otus
	$(V)cdhit-est -i seq.fasta -o picked_otus/cd-hit-out -c 0.97 -M 6144 -T 0 -B 1 > picked_otus/cd-hit.output 2>&1

picked_otus/seq_otus.txt: picked_otus/cd-hit-out.clstr
	@echo Converting cdhit cluster file to proper format...
	@awk '{ ORS="" } { if (/>Cluster/) { if ( NR != 1 ) { print "\n"; } print $$2; } else { print "\t"; gsub(/\.\.\./,""); print substr($$3,2); }}' $< > $@
else
picked_otus/seq_otus.txt: seq.fasta custom_parameters.txt
	@echo Picking OTUs using QIIME and $(OTU_PICKING_METHOD)...
	@test ! -d picked_otus || rm -r picked_otus
	$(V)$(QIIME_PREFIX)pick_otus.py -i seq.fasta -m $(OTU_PICKING_METHOD) -o picked_otus -M 4096
endif
endif

seq.fasta_rep_set.fasta: picked_otus/seq_otus.txt seq.fasta
	@echo Picking represntative set...
	$(V)aq-mkrepset seq.fasta picked_otus/seq_otus.txt > seq.fasta_rep_set.fasta

aligned/seq.fasta_rep_set_aligned.fasta: seq.fasta_rep_set.fasta
	@echo Aligning representative sequences...
	@test ! -d aligned || rm -r aligned
	$(V)$(QIIME_PREFIX)align_seqs.py -o aligned -m $(ALIGN_METHOD) -t $$INFERNAL_MODEL -i seq.fasta_rep_set.fasta

rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt: seq.fasta_rep_set.fasta
	@echo Assigning taxonomy...
	@test ! -d rdp_assigned_taxonomy || rm -r rdp_assigned_taxonomy
	$(V)$(QIIME_PREFIX)assign_taxonomy.py -i seq.fasta_rep_set.fasta -o rdp_assigned_taxonomy

seq.fasta_rep_set_aligned_pfiltered.fasta: aligned/seq.fasta_rep_set_aligned.fasta
	@echo Filtering alignment...
	$(V)$(QIIME_PREFIX)filter_alignment.py -i aligned/seq.fasta_rep_set_aligned.fasta -s

seq.fasta_rep_set_aligned_pfiltered.tre:seq.fasta_rep_set_aligned_pfiltered.fasta
	@echo Building tree...
	$(V)$(QIIME_PREFIX)make_phylogeny.py -i seq.fasta_rep_set_aligned_pfiltered.fasta

otu_table.txt: picked_otus/seq_otus.txt rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt
	@echo Making OTU table...
	$(V)$(QIIME_PREFIX)make_otu_table.py -i picked_otus/seq_otus.txt -t rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt -o otu_table.txt

ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table_ordered_columns.txt: otu_table.tab
	@echo Creating OTU table with numerically ordered columns...
	$(V)$(QIIME_PREFIX)aq-orderotu otu_table.tab > otu_table_ordered_columns.txt
else
otu_table_ordered_columns.txt: otu_table.txt
	@echo Creating OTU table with numerically ordered columns...
	$(V)$(QIIME_PREFIX)aq-orderotu otu_table.txt > otu_table_ordered_columns.txt
endif

otu_table_summarized_otu%.txt: otu_table%.txt
	@echo Summarizing OTUs $*...
	$(V)aq-pretendsummarize $< > $@

# Produce a rank-abundance plot
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
rank_abundance/rank_abundance.pdf: otu_table.txt otu_table.tab
	@echo Plotting rank-abundance curves...
	@test ! -d rank_abundance || rm -r rank_abundance
	$(V)$(QIIME_PREFIX)plot_rank_abundance_graph.py -i otu_table.txt -s "$$(awk -F "\t" 'NR == 2 { printf("%s", $$2); for (i = 3; i < NF; i++) { printf(",%s", $$i); } printf("\n"); exit; }' otu_table.tab)" -o rank_abundance
	mv rank_abundance/rank_abundance_cols*.pdf rank_abundance/rank_abundance.pdf
else
rank_abundance/rank_abundance.pdf: otu_table.txt
	@echo Plotting rank-abundance curves...
	@test ! -d rank_abundance || rm -r rank_abundance
	$(V)$(QIIME_PREFIX)plot_rank_abundance_graph.py -i otu_table.txt -s "$$(awk -F "\t" 'NR == 2 { printf("%s", $$2); for (i = 3; i < NF; i++) { printf(",%s", $$i); } printf("\n"); exit; }' otu_table.txt)" -o rank_abundance
	mv rank_abundance/rank_abundance_cols*.pdf rank_abundance/rank_abundance.pdf
endif

# Produce a BLAST database
nr.nhr nr.nin nr.nsq: seq.fasta_rep_set.fasta
	@echo Creaing non-redundant BLAST database...
	$(V)formatdb -i seq.fasta_rep_set.fasta -n nr -p F -t $(BLASTDB_NAME)" Non-Redundant"

r.nhr r.nin r.nsq: seq.fasta
	@echo Creaing redundant BLAST database...
	$(V)formatdb -i seq.fasta -n r -p F -t $(BLASTDB_NAME)

# Decorate OTU table with representative sequences
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.tab
	@echo Adding sequences to OTU table...
	$(V)aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.tab > otu_table_with_sequences.txt
else
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.txt
	@echo Adding sequences to OTU table...
	$(V)aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.txt > otu_table_with_sequences.txt
endif

# Do chimera checking with UCHIME
sorted%.fasta: seq%.fasta
	@echo Sorting sequences in library $*...
	$(V)uclust --mergesort $< --output $@

seq%.fasta: seq.fasta
	@echo Splitting out library $*...
	$(V)awk '/^>/ { if (name) { print name "\n" seq; } if ($$0 ~ /$*_/) { name = $$0; } else { name = ""; } seq = ""; } $$0 !~ /^>/ { seq = seq $$0; } END { if (name) { print name "\n" seq; } }' $< > $@

identities%.uc: sorted%.fasta
	@echo Compacting sequences in library $*...
	$(V)uclust --input $< --uc $@ --id 1

identities%.awk: identities%.uc
	@echo Preparing chimeric sequence selector for library $*....
	$(V)awk 'END {print "$$0 !~ /^>/"} $$1 == "C" {print "/^>"$$2"\\|/ { print \">"$$2";size="$$3"\"; }" }' $< > $@

identities%.fasta: identities%.uc sorted%.fasta identities%.awk
	@echo Selection chimeric sequence for library $*....
	$(V)uclust --uc2fasta $< --input sorted$*.fasta --output /dev/stdout | awk -f identities$*.awk > $@

chimeras%.uchime chimeras%.aln chimeras%.fasta: identities%.fasta
	@echo Checking for chimeric sequences in library $*...
	$(V)usearch --uchime $< --uchimeout chimeras$*.uchime --uchimealns chimeras$*.aln --chimeras chimeras$*.fasta $(UCHIMEFLAGS)

# PCA with R
biplot.pdf: mapping.txt otu_table_ordered_columns.txt headers.txt
	@echo Making biplot...
	$(V)aq-pca

# NMF Concordance
nmf-concordance.pdf: otu_table_ordered_columns.txt
	@echo Making concordance plot...
	$(V)aq-nmf-concordance

# MRPP
mrpp.txt mrpp.pdf: otu_table_ordered_columns.txt mapping.txt
	@echo Computing Multi Response Permutation Procedure...
	$(V)aq-mrpp

.PHONY: all alpha
