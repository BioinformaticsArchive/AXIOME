#!/usr/bin/make -f
# Automation tool for QIIME
#
# Basic rules for doing QIIME analysis. It assumes you have a mapping.txt file with all your sequences and that your sequences are named in QIIME's ${SampleID::int}_${UID::int} format. AutoQIIME does this for you. ;-)

# Alpha diversity (Chao1 curves) -- This is here so that if you simply do qiime_setup from the terminal, it will attempt to do alpha diversity.
alpha: alpha_div/alpha_rarefaction_plots/rarefaction_plots.html

alpha_div/alpha_rarefaction_plots/rarefaction_plots.html: otu_table.txt mapping.txt seq.fasta_rep_set_aligned_pfiltered.tre
	@echo Computing Alpha Diversity...
	@test ! -d rarefaction_tables || rm -r rarefaction_tables
	@test ! -d alpha_div || rm -r alpha_div
	$(V)$(QIIME_PREFIX)alpha_rarefaction.py -i otu_table.txt -m mapping.txt -t seq.fasta_rep_set_aligned_pfiltered.tre -o alpha_div

OTU_PICKING_METHOD ?= cdhit
PHYLO_METHOD ?= fasttree
CLUSTER_IDENT ?= 0.97
RDP_CONFIDENCE ?= 0.8
ALIGN_METHOD ?= infernal
BLASTDB_NAME ?= "Unknown 16S Database"
V ?= @

# Build basic data from sequences
ifeq ($(OTU_PICKING_METHOD),raw-uclust)
sorted.fasta: seq.fasta
	@echo Sorting sequences...
	$(V)uclust --mergesort $< --output $@

seq.uc: sorted.fasta
	@echo Picking OTUs using uclust without QIIME...
	$(V)uclust --id $(CLUSTER_IDENT) --input sorted.fasta --uc seq.uc

picked_otus/seq_otus.txt: seq.uc
	@test -d picked_otus || mkdir -p picked_otus
	@awk '$$1 == "S" { a[$$2] = "\t" $$9; if ($$2 > m) { m = $$2; } } $$1 == "H" { a[$$2] = (a[$$2] "\t" $$9); } END { for (i = 0; i < m; i++) { print i a[i]; }}' $< > $@
else
ifeq ($(OTU_PICKING_METHOD),raw-cdhit)
picked_otus/cd-hit-out.clstr: seq.fasta
	@echo Generating cluster file using cdhit...
	@test -d picked_otus || mkdir -p picked_otus
	$(V)cd-hit-est -i seq.fasta -o picked_otus/cd-hit-out -c $(CLUSTER_IDENT) -B 1 -M 0 > picked_otus/cd-hit.output 2>&1

picked_otus/seq_otus.txt: picked_otus/cd-hit-out.clstr
	@echo Converting cdhit cluster file to proper format...
	@awk '{ ORS="" } { if (/>Cluster/) { if ( NR != 1 ) { print "\n"; } print $$2; } else { print "\t"; gsub(/\.\.\./,""); print substr($$3,2); }}' $< > $@
else
picked_otus/seq_otus.txt: seq.fasta
	@echo Picking OTUs using QIIME and $(OTU_PICKING_METHOD)...
	@test ! -d picked_otus || rm -r picked_otus
	$(V)$(QIIME_PREFIX)pick_otus.py -i seq.fasta -s $(CLUSTER_IDENT) -m $(OTU_PICKING_METHOD) -o picked_otus -M 4096
endif
endif

seq.fasta_rep_set.fasta: picked_otus/seq_otus.txt seq.fasta
	@echo Picking represntative set...
	$(V)aq-mkrepset seq.fasta picked_otus/seq_otus.txt > seq.fasta_rep_set.fasta

ifeq ($(ALIGN_METHOD),infernal)
aligned/seq.fasta_rep_set_aligned.fasta: seq.fasta_rep_set.fasta
	@echo Aligning representative sequences with infernal...
	@test ! -d aligned || rm -r aligned
	$(V)$(QIIME_PREFIX)align_seqs.py -o aligned -m infernal -t $$INFERNAL_MODEL -i seq.fasta_rep_set.fasta
else
aligned/seq.fasta_rep_set_aligned.fasta: seq.fasta_rep_set.fasta
	@echo Aligning representative sequences with $(ALIGN_METHOD)...
	@test ! -d aligned || rm -r aligned
	$(V)$(QIIME_PREFIX)align_seqs.py -o aligned -m $(ALIGN_METHOD) -i seq.fasta_rep_set.fasta
endif

rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt: seq.fasta_rep_set.fasta
	@echo Assigning taxonomy...
	@test ! -d rdp_assigned_taxonomy || rm -r rdp_assigned_taxonomy
	$(V)$(QIIME_PREFIX)assign_taxonomy.py -i seq.fasta_rep_set.fasta -o rdp_assigned_taxonomy -c $(RDP_CONFIDENCE)

seq.fasta_rep_set_aligned_pfiltered.fasta: aligned/seq.fasta_rep_set_aligned.fasta
	@echo Filtering alignment...
	$(V)$(QIIME_PREFIX)filter_alignment.py -i aligned/seq.fasta_rep_set_aligned.fasta -s

ifeq ($(PHYLO_METHOD),raw-fasttree)
seq.fasta_rep_set_aligned_pfiltered.tre: seq.fasta_rep_set_aligned_pfiltered.fasta
	@echo Building tree with a RAW FastTree call...
	$(V)$(QIIME_PREFIX)FastTree -nt < seq.fasta_rep_set_aligned_pfiltered.fasta > seq.fasta_rep_set_aligned_pfiltered.tre
else
seq.fasta_rep_set_aligned_pfiltered.tre: seq.fasta_rep_set_aligned_pfiltered.fasta
	@echo Building tree with $(PHYLO_METHOD)...
	$(V)$(QIIME_PREFIX)make_phylogeny.py -i seq.fasta_rep_set_aligned_pfiltered.fasta -t $(PHYLO_METHOD)
endif

otu_table.txt: picked_otus/seq_otus.txt rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt
	@echo Making OTU table...
	$(V)$(QIIME_PREFIX)make_otu_table.py -i picked_otus/seq_otus.txt -t rdp_assigned_taxonomy/seq.fasta_rep_set_tax_assignments.txt -o otu_table.txt

otu_table%.tab: otu_table%.txt
	@echo Creating legacy OTU table...
	$(V)$(QIIME_PREFIX)convert_biom.py -b -i $< -o $@ --header_key=taxonomy --output_metadata_id=Consensus\ Lineage

ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table_summarized_otu%.txt: otu_table%.tab
	@echo Summarizing OTUs $*...
	$(V)aq-pretendsummarize $< > $@
else
otu_table_summarized_otu%.txt: otu_table%.txt
	@echo Summarizing OTUs $*...
	$(V)aq-pretendsummarize $< > $@
endif

# Produce a rank-abundance plot
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
rank_abundance/rank_abundance.pdf: otu_table.txt otu_table.tab
	@echo Plotting rank-abundance curves...
	@test ! -d rank_abundance || rm -r rank_abundance
	$(V)$(QIIME_PREFIX)plot_rank_abundance_graph.py -i otu_table.txt -s "$$(awk -F "\t" 'NR == 2 { printf("%s", $$2); for (i = 3; i < NF; i++) { printf(",%s", $$i); } printf("\n"); exit; }' otu_table.tab)" -o rank_abundance
	mv rank_abundance/rank_abundance_cols*.pdf rank_abundance/rank_abundance.pdf
else
rank_abundance/rank_abundance.pdf: otu_table.txt
	@echo Plotting rank-abundance curves...
	@test ! -d rank_abundance || rm -r rank_abundance
	$(V)$(QIIME_PREFIX)plot_rank_abundance_graph.py -i otu_table.txt -s "$$(awk -F "\t" 'NR == 2 { printf("%s", $$2); for (i = 3; i < NF; i++) { printf(",%s", $$i); } printf("\n"); exit; }' otu_table.txt)" -o rank_abundance
	mv rank_abundance/rank_abundance_cols*.pdf rank_abundance/rank_abundance.pdf
endif

# Produce a BLAST database
blastdbs/nr.nhr blastdbs/nr.nin blastdbs/nr.nsq: seq.fasta_rep_set.fasta
	@echo Creaing non-redundant BLAST database...
	@test -d blastdbs || mkdir blastdbs
	$(V)formatdb -i seq.fasta_rep_set.fasta -n nr -p F -t $(BLASTDB_NAME)" Non-Redundant"
	$(V)mv nr.* blastdbs

blastdbs/r.nhr blastdbs/r.nin blastdbs/r.nsq: seq.fasta
	@echo Creaing redundant BLAST database...
	@test -d blastdbs || mkdir blastdbs
	$(V)formatdb -i seq.fasta -n r -p F -t $(BLASTDB_NAME)
	$(V)mv r.* blastdbs

# Decorate OTU table with representative sequences
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.tab
	@echo Adding sequences to OTU table...
	$(V)aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.tab > otu_table_with_sequences.txt
else
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.txt
	@echo Adding sequences to OTU table...
	$(V)aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.txt > otu_table_with_sequences.txt
endif

# Do chimera checking with UCHIME
chimeras/sorted%.fasta: chimeras/seq%.fasta
	@echo Sorting sequences in library $*...
	$(V)uclust --quiet --mergesort $< --output $@

chimeras/seq%.fasta: seq.fasta
	@echo Splitting out library $*...
	@test -d chimeras || mkdir chimeras
	$(V)awk '/^>/ { if (name) { print name "\n" seq; } if ($$0 ~ /$*_/) { name = $$0; } else { name = ""; } seq = ""; } $$0 !~ /^>/ { seq = seq $$0; } END { if (name) { print name "\n" seq; } }' $< > $@

chimeras/identities%.uc: chimeras/sorted%.fasta
	@echo Compacting sequences in library $*...
	$(V)uclust --quiet --input $< --uc $@ --id 1

chimeras/identities%.awk: chimeras/identities%.uc
	@echo Preparing chimeric sequence selector for library $*....
	$(V)awk 'END {print "$$0 !~ /^>/"} $$1 == "C" {print "/^>"$$2"\\|/ { print \">"$$2";size="$$3"\"; }" }' $< > $@

chimeras/identities%.fasta: chimeras/identities%.uc chimeras/sorted%.fasta chimeras/identities%.awk
	@echo Selection chimeric sequence for library $*....
	$(V)uclust --uc2fasta $< --input chimeras/sorted$*.fasta --output /dev/stdout --quiet | awk -f chimeras/identities$*.awk > $@

chimeras/chimeras%.uchime chimeras/himeras%.aln chimeras/chimeras%.fasta: chimeras/identities%.fasta
	@echo Checking for chimeric sequences in library $*...
	$(V)usearch --uchime $< --uchimeout chimeras/chimeras$*.uchime --uchimealns chimeras/chimeras$*.aln --chimeras chimeras/chimeras$*.fasta --quiet $(UCHIMEFLAGS)

# PCA with R
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
pca-biplot.pdf: mapping.txt otu_table.txt headers.txt
	@echo Making biplot...
	$(V)aq-pca -B
else
pca-biplot.pdf: mapping.txt otu_table.txt headers.txt
	@echo Making biplot...
	$(V)aq-pca
endif

# NMF Concordance
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
nmf-concordance.pdf: otu_table.txt
	@echo Making concordance plot...
	$(V)aq-nmf-concordance -B
else
nmf-concordance.pdf: otu_table.txt
	@echo Making concordance plot...
	$(V)aq-nmf-concordance
endif

# MRPP
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
mrpp.txt mrpp.pdf: otu_table.txt mapping.txt
	@echo Computing Multi Response Permutation Procedure...
	$(V)aq-mrpp -B
else
mrpp.txt mrpp.pdf: otu_table.txt mapping.txt
	@echo Computing Multi Response Permutation Procedure...
	$(V)aq-mrpp
endif
	
.PHONY: all alpha
