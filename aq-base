#!/usr/bin/make -f
# Automation tool for numerical ecology tools
# Rules which are common between all pipelines go here

#Defaults for all pipelines
NUM_CORES ?= 1
BLASTDB_NAME ?= "Unknown 16S Database"
BLASTDB_COMMAND ?= formatdb
V ?= @

ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table_summarized_otu%.txt: otu_table%.tab
	@echo Summarizing OTUs $*...
	$(V)aq-pretendsummarize $< > $@
else
otu_table_summarized_otu%.txt: otu_table%.txt
	@echo Summarizing OTUs $*...
	$(V)aq-pretendsummarize $< > $@
endif


# Produce a BLAST database
ifeq ($(BLASTDB_COMMAND),formatdb)
blastdbs/nr.nhr blastdbs/nr.nin blastdbs/nr.nsq: seq.fasta_rep_set.fasta
	@echo Creating non-redundant BLAST database with formatdb...
	@test -d blastdbs || mkdir blastdbs
	$(V)formatdb -i seq.fasta_rep_set.fasta -n nr -p F -t $(BLASTDB_NAME)" Non-Redundant"
	$(V)mv nr.* blastdbs
else
ifeq ($(BLASTDB_COMMAND),makeblastdb)
blastdbs/nr.nhr blastdbs/nr.nin blastdbs/nr.nsq: seq.fasta_rep_set.fasta
	@echo Creating non-redundant BLAST database with makeblastdb...
	@test -d blastdbs || mkdir blastdbs
	$(V)makeblastdb -in seq.fasta_rep_set.fasta -dbtype nucl -title $(BLASTDB_NAME)" Non-Redundant" -parse_seqids -out nr
	$(V)mv nr.* blastdbs
endif
endif

ifeq ($(BLASTDB_COMMAND),formatdb)
blastdbs/r.nhr blastdbs/r.nin blastdbs/r.nsq: seq.fasta
	@echo Creating redundant BLAST database with formatdb...
	@test -d blastdbs || mkdir blastdbs
	$(V)formatdb -i seq.fasta -n r -p F -t $(BLASTDB_NAME)
	$(V)mv r.* blastdbs
else
ifeq ($(BLASTDB_COMMAND),makeblastdb)
blastdbs/r.nhr blastdbs/r.nin blastdbs/r.nsq: seq.fasta_rep_set.fasta
	@echo Creating redundant BLAST database with makeblastdb...
	@test -d blastdbs || mkdir blastdbs
	$(V)makeblastdb -in seq.fasta -dbtype nucl -title $(BLASTDB_NAME) -parse_seqids -out r
	$(V)mv r.* blastdbs
endif
endif

# Decorate OTU table with representative sequences
ifeq ($(PIPELINE), MOTHUR)
otu_table_with_sequences.txt: otu_table.tab
	#mothur spits out a horrid array of files which make little sense. This makes it impossible to get the OTU sequences,
	#since the sequence file has a different naming scheme than the OTUs, and there is nothing to correlate the two
	#In the future I may run this through aq-mkrepset and do it that way, but it is brutally disk access intensive for
	#something you don't get much information from
	@echo Creating OTU table with sequence column...
	$(V)awk '{ if (NR == 2) { print $$0 "\tRepr Sequence" } else if ( NR > 1 ) { print $$0 "\tNA" } else { print $$0 } }' otu_table.tab > otu_table_with_sequences.txt
else
ifeq ($(QIIME_GREATER_THAN_1_5),TRUE)
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.tab
	@echo Adding sequences to OTU table...
	$(V)aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.tab > otu_table_with_sequences.txt
else
otu_table_with_sequences.txt: seq.fasta_rep_set.fasta otu_table.txt
	@echo Adding sequences to OTU table...
	$(V)aq-otuwithseqs seq.fasta_rep_set.fasta otu_table.txt > otu_table_with_sequences.txt
endif
endif

# Do chimera checking with UCHIME
chimeras/sorted%.fasta: chimeras/seq%.fasta
	@echo Sorting sequences in library $*...
	$(V)uclust --quiet --mergesort $< --output $@

chimeras/seq%.fasta: seq.fasta
	@echo Splitting out library $*...
	@test -d chimeras || mkdir chimeras
	$(V)awk '/^>/ { if (name) { print name "\n" seq; } if ($$0 ~ /$*_/) { name = $$0; } else { name = ""; } seq = ""; } $$0 !~ /^>/ { seq = seq $$0; } END { if (name) { print name "\n" seq; } }' $< > $@

chimeras/identities%.uc: chimeras/sorted%.fasta
	@echo Compacting sequences in library $*...
	$(V)uclust --quiet --input $< --uc $@ --id 1

chimeras/identities%.awk: chimeras/identities%.uc
	@echo Preparing chimeric sequence selector for library $*....
	$(V)awk 'END {print "$$0 !~ /^>/"} $$1 == "C" {print "/^>"$$2"\\|/ { print \">"$$2";size="$$3"\"; }" }' $< > $@

chimeras/identities%.fasta: chimeras/identities%.uc chimeras/sorted%.fasta chimeras/identities%.awk
	@echo Selection chimeric sequence for library $*....
	$(V)uclust --uc2fasta $< --input chimeras/sorted$*.fasta --output /dev/stdout --quiet | awk -f chimeras/identities$*.awk > $@

chimeras/chimeras%.uchime chimeras/himeras%.aln chimeras/chimeras%.fasta: chimeras/identities%.fasta
	@echo Checking for chimeric sequences in library $*...
	$(V)usearch --uchime $< --uchimeout chimeras/chimeras$*.uchime --uchimealns chimeras/chimeras$*.aln --chimeras chimeras/chimeras$*.fasta --quiet $(UCHIMEFLAGS)

# PCA with R
ifndef QIIME_GREATER_THAN_1_5
pca-biplot.pdf: mapping.txt otu_table.txt headers.txt
	@echo Making biplot...
	$(V)aq-pca
else
pca-biplot.pdf: mapping.txt otu_table.tab headers.txt
	@echo Making biplot...
	$(V)aq-pca -B
endif

# NMF Concordance
ifndef QIIME_GREATER_THAN_1_5
nmf-concordance.pdf: otu_table.txt
	@echo Making concordance plot...
	$(V)aq-nmf-concordance
else
nmf-concordance.pdf: otu_table.tab
	@echo Making concordance plot...
	$(V)aq-nmf-concordance -B
endif

# NMF Concordance + NMF plots on candidate degrees (if any)
ifndef QIIME_GREATER_THAN_1_5
nmf-concordance-auto.pdf: otu_table.txt
	@echo Making concordance plot and NMF plots on candidate degrees \(if any\)...
	$(V)aq-nmf-concordance -A
else
nmf-concordance-auto.pdf: otu_table.tab
	@echo Making concordance plot and NMF plots on candidate degrees \(if any\)...
	$(V)aq-nmf-concordance -B -A
endif

.PHONY: all alpha
