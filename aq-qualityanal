#!/usr/bin/make -f
# Make pretty heat maps about quality statistics in Illumina runs

FASTQFILES ?= $(basename $(basename $(wildcard *.fastq.bz2) $(wildcard *.fastq.gz)))
QATARGETS = $(addsuffix .b.pdf, $(FASTQFILES)) $(addsuffix .n.pdf, $(FASTQFILES)) $(addsuffix .cnt.pdf, $(FASTQFILES)) $(addsuffix .q.pdf, $(FASTQFILES)) $(addsuffix .nposn.pdf, $(FASTQFILES)) $(addsuffix .qposn.pdf, $(FASTQFILES))
QABASETARGETS = $(addsuffix .posnhist, $(FASTQFILES)) $(addsuffix .xystat, $(FASTQFILES))

V ?= @

qualitygraphs: $(QATARGETS) $(QABASETARGETS)
qualityanal: $(QABASETARGETS)

%.xystat %.posnhist: %.fastq.bz2
	@echo Computing read quality statistics for $*...
	$(V)aq-qualhisto -j -f $< > $*.xystat 2> $*.posnhist

%.xystat %.posnhist: %.fastq.gz
	@echo Computing read quality statistics for $*...
	$(V)aq-qualhisto -f $< > $*.xystat 2> $*.posnhist

%.xystat %.posnhist: %.fastq
	@echo Computing read quality statistics for $*...
	$(V)aq-qualhisto -f $< > $*.xystat 2> $*.posnhist

%.nmatrix: %.xystat
	@echo Counting sequence uncalled base counts over the flow cell for $*...
	$(V)awk '{c[int($$1/100),int($$2/100)]++; n[int($$1/100), int($$2/100)] += $$3; if (maxx < int($$1/100)) {maxx = int($$1/100);} if (maxy < int($$2/100)) {maxy = int($$2/100);}} END {for (x = 0;x<maxx;x++) { for (y = 0; y < maxy; y++) { printf (" %f", c[x,y] == 0 ? 0 : n[x,y]/c[x,y]);} printf("\n");}}' $< > $@

%.bmatrix: %.xystat
	@echo Counting sequence read mask lengths over the flow cell for $*...
	$(V)awk '{c[int($$1/100),int($$2/100)]++; b[int($$1/100), int($$2/100)] += $$7; if (maxx < int($$1/100)) {maxx = int($$1/100);} if (maxy < int($$2/100)) {maxy = int($$2/100);}} END {for (x = 0;x<maxx;x++) { for (y = 0; y < maxy; y++) { printf (" %f", c[x,y] == 0 ? 0 : b[x,y]/c[x,y]);} printf("\n");}}' $< > $@

%.qmatrix: %.xystat
	@echo Counting sequence quality over the flow cell for $*...
	$(V)awk '{c[int($$1/100),int($$2/100)]++; q[int($$1/100), int($$2/100)] +=$$5; if (maxx < int($$1/100)) {maxx = int($$1/100);} if (maxy < int($$2/100)) {maxy = int($$2/100);}} END {for (x = 0;x<maxx;x++) { for (y = 0; y < maxy; y++) { printf (" %f", c[x,y] == 0 ? 0 : q[x,y]/c[x,y]);} printf("\n");}}' $< > $@

%.cntmatrix: %.xystat
	@echo Counting sequence density over the flow cell for $*...
	$(V)awk '{c[int($$1/100),int($$2/100)]++; if (maxx < int($$1/100)) {maxx = int($$1/100);} if (maxy < int($$2/100)) {maxy = int($$2/100);}} END {for (x = 0;x<maxx;x++) { for (y = 0; y < maxy; y++) { printf (" %d", c[x,y]);} printf("\n");}}' $< > $@

%.n.pdf: %.nmatrix
	@echo Plotting sequence uncalled base counts over the flow cell for $*...
	$(V)@echo 'library(gplots); pdf("$@"); heatmap.2(as.matrix(read.table("$<")),Rowv=NA,Colv=NA, trace="none", density.info="none", col=topo.colors, labRow="", labCol=""); dev.off();' | R --no-save -q --slave
%.b.pdf: %.bmatrix
	@echo Plotting sequence read mask lengths over the flow cell for $*...
	$(V)echo 'library(gplots); pdf("$@"); heatmap.2(as.matrix(read.table("$<")),Rowv=NA,Colv=NA, trace="none", density.info="none", col=topo.colors, labRow="", labCol=""); dev.off();' | R --no-save -q --slave
%.q.pdf: %.qmatrix
	@echo Plotting sequence quality over the flow cell for $*...
	$(V)echo 'library(gplots); pdf("$@"); heatmap.2(as.matrix(read.table("$<")),Rowv=NA,Colv=NA, trace="none", density.info="none", col=topo.colors, labRow="", labCol=""); dev.off();' | R --no-save -q --slave
%.cnt.pdf: %.cntmatrix
	@echo Plotting sequence density over the flow cell for $*...
	$(V)echo 'library(gplots); pdf("$@"); heatmap.2(as.matrix(read.table("$<")),Rowv=NA,Colv=NA, trace="none", density.info="none", col=topo.colors, labRow="", labCol=""); dev.off();' | R --no-save -q --slave

%.qposn.pdf: %.posnhist
	@echo Plot of base quality locations in sequences for $*...
	$(V)echo 'library(gplots); pdf("$@"); d <- read.table("$<"); plotCI(d$$V1, d$$V2, uiw = d$$V3, xlab = "Position (nt)", ylab="Quality Score"); dev.off();' | R --no-save -q --slave

%.nposn.pdf: %.posnhist
	@echo Plot of locations of Ns in sequences for $*...
	$(V)echo 'library(gplots); pdf("$@"); d <- read.table("$<"); plot(d$$V1, d$$V4, xlab = "Position (nt)", ylab="N Count"); dev.off();' | R --no-save -q --slave

clean:
	$(V)rm -f $(TARGETS) $(BASETARGETS) 

.PHONY: qualitygraphs qualityanal clean
